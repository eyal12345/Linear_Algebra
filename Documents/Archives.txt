-------------------------------------------------------- Invertible_Matrices --------------------------------------------------------
////////////////////////////////////////////// Write Methods ////////////////////////////////////////////////
// determine what kind of matrix
private String Which_Type_Triangular(float[][] M, boolean flag) {
    if (Is_Upper_Triangular(M) && Is_Lower_Triangular(M)) {
        return "M is already parallel triangular so now will be change directly to I:";
    } else if (Is_Upper_Triangular(M) && !Is_Lower_Triangular(M) && flag) {
        return "M is already upper triangular so now we'll go directly to the lower ranking:";
    } else if (!Is_Upper_Triangular(M) && Is_Lower_Triangular(M) && !flag) {
        return "M is already lower triangular so now we'll go directly to the upper ranking:";
    } else if (!Is_Upper_Triangular(M) && Is_Lower_Triangular(M) && flag) {
        return "transform L matrix to I by upper ranking:";
    } else if (Is_Upper_Triangular(M) && !Is_Lower_Triangular(M) && !flag) {
        return "transform U matrix to I by lower ranking:";
    } else if (flag) {
        return "transform M matrix to U by upper ranking:";
    } else {
        return "transform M matrix to L by lower ranking:";
    }
}

///////////////////////////////////////////////// Locations /////////////////////////////////////////////////
// get the index starting from the specific column in the matrix which are him value not equal to 0 with or in the negative direction
private int Index_UnZero_Value(float[][] M, int k, boolean flag) {
    int n = M.length;
    if (flag) {
        for (int i = k + 1; i < n + k; i++) {
            if (M[i % n][k] != 0) {
                return i % n;
            }
        }
    } else {
        for (int i = n + k - 1; i > k - 1; i--) {
            if (M[i % n][k] != 0) {
                return i % n;
            }
        }
    }
    return -1;
}

/////////////////////////////////////////// Methods to Solution /////////////////////////////////////////////
// invert the M matrix by upper ranking and then lower ranking
private float[][] Upper_Ranking_Method(float[][] M) {
    writer.println(Which_Type_Triangular(M,true));
    int n = M.length;
    float[][] InvM = this.InvM;
    for (int i = 0; i < n; i++) {
        if (M[i][i] == 0) {
            int r = Index_UnZero_Value(M,i,true);
            Retreat_Elementary_Action(i,r);
            Retreat_Rows_Matrices(M,InvM,i,r);
            Write_Status_Matrices(M,InvM);
        }
        for (int j = i + 1; j < n; j++) {
            if (M[j][i] != 0) {
                float c = M[j][i] / M[i][i];
                Sum_Elementary_Action(c,j,i);
                for (int k = 0; k < n; k++) {
                    M[j][k] -= M[i][k] * c;
                    InvM[j][k] -= InvM[i][k] * c;
                }
                M[j][i] = 0;
                Write_Status_Matrices(M,InvM);
            } if (Is_Unit_Vector(M,j) && M[j][j] != 1) {
                float c = 1 / M[j][j];
                Mul_Elementary_Action(c,j);
                for (int k = 0; k < n; k++) {
                    InvM[j][k] /= M[j][j];
                }
                M[j][j] = 1;
                Write_Status_Matrices(M,InvM);
            }
        }
        if (Is_Upper_Triangular(M) && !Is_Lower_Triangular(M)) {
            writer.print("and now ");
            return Lower_Ranking_Method(M);
        }
    }
    if (!Is_Unit_Matrix(M)) {
        writer.println("still not yet received unit matrix");
        return Lower_Ranking_Method(M);
    }
    return InvM;
}

// invert the M matrix by lower ranking and then upper ranking
private float[][] Lower_Ranking_Method(float[][] M) {
    writer.println(Which_Type_Triangular(M,false));
    int n = M.length;
    float[][] InvM = this.InvM;
    for (int i = n - 1; i >= 0; i--) {
        if (M[i][i] == 0) {
            int r = Index_UnZero_Value(M,i,false);
            Retreat_Elementary_Action(i,r);
            Retreat_Rows_Matrices(M,InvM,i,r);
            Write_Status_Matrices(M,InvM);
        }
        for (int j = i - 1; j >= 0; j--) {
            if (M[j][i] != 0) {
                float c = M[j][i] / M[i][i];
                Sum_Elementary_Action(c,j,i);
                for (int k = n - 1; k >= 0; k--) {
                    M[j][k] -= M[i][k] * c;
                    InvM[j][k] -= InvM[i][k] * c;
                }
                M[j][i] = 0;
                Write_Status_Matrices(M,InvM);
            } if (Is_Unit_Vector(M,j) && M[j][j] != 1) {
                float c = 1 / M[j][j];
                Mul_Elementary_Action(c,j);
                for (int k = 0; k < n; k++) {
                    InvM[j][k] /= M[j][j];
                }
                M[j][j] = 1;
                Write_Status_Matrices(M,InvM);
            }
        }
        if (!Is_Upper_Triangular(M) && Is_Lower_Triangular(M)) {
            writer.print("and now ");
            return Upper_Ranking_Method(M);
        }
    }
    if (!Is_Unit_Matrix(M)) {
        writer.println("still not yet received unit matrix");
        return Upper_Ranking_Method(M);
    }
    return InvM;
}

------------------------------------------------------ System_Linear_Equations ------------------------------------------------------
/////////////////////////////////////////////// Write Methods ////////////////////////////////////////////////
// determine what kind of matrix
private String Which_Type_Triangular(float[][] A, boolean flag) {
    if (Is_Upper_Triangular(A) && Is_Lower_Triangular(A)) {
        return "A is already parallel triangular so now will be change directly to I:";
    } else if (Is_Upper_Triangular(A) && !Is_Lower_Triangular(A) && flag) {
        return "A is already upper triangular so now we'll go directly to the lower ranking:";
    } else if (!Is_Upper_Triangular(A) && Is_Lower_Triangular(A) && !flag) {
        return "A is already lower triangular so now we'll go directly to the upper ranking:";
    } else if (!Is_Upper_Triangular(A) && Is_Lower_Triangular(A) && flag) {
        return "transform L matrix to I by upper ranking:";
    } else if (Is_Upper_Triangular(A) && !Is_Lower_Triangular(A) && !flag) {
        return "transform U matrix to I by lower ranking:";
    } else if (flag) {
        return "transform A matrix to U by upper ranking:";
    } else {
        return "transform A matrix to L by lower ranking:";
    }
}

///////////////////////////////////////////// Change Dimensions //////////////////////////////////////////////
// add more zero rows in the system by needed
private void Increase_Rows_in_System(float[][] A, float[][] b) {
    int m = A.length, n = A[0].length;
    float[][] nA = new float[n][n];
    float[][] nb = new float[n][1];
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            nA[i][j] = A[i][j];
        }
        nb[i][0] = b[i][0];
    }
    this.A = nA; this.b = nb;
}

////////////////////////////////////////////// Free Variables ///////////////////////////////////////////////
// fill rows to full square system
private void Fill_Square_System(float[][] A, float[][] b) {
    int m = A.length, n = A[0].length;
    if (m < n) { // Underdetermined Systems
        if (n - m == 1) {
            writer.println("added one more row of zeros in order to get square completion");
        } else {
            writer.println("added " + (n - m) + " more rows of zeros in order to get square completion");
        }
        Increase_Rows_in_System(A,b);
    }
    // Overdetermined Systems
}

////////////////////////////////////////////////// Questions /////////////////////////////////////////////////
// check if exists two vectors in the matrix which are linearly independent
private boolean Is_Linear_Independent(float[][] A, float[][] b) {
    int m = A.length, n = A[0].length;
    for (int r = 0; r < m; r++) {
        if (Is_Zero_Row(A,r) && b[r][0] != 0) {
            return true;
        }
    }
    for (int r1 = 0; r1 < m - 1; r1++) {
        for (int r2 = r1 + 1; r2 < m; r2++) {
            Vector<Float> R  = new Vector<Float>();
            for (int j = 0; j < n; j++) {
                if (A[r1][j] != 0 || A[r2][j] != 0) {
                    R.add(A[r1][j] / A[r2][j]);
                }
            }
            if (Is_Equals_Values(R) && R.size() > 0 && (b[r1][0] != 0 || b[r2][0] != 0) && (b[r1][0] / b[r2][0] != R.get(0))) {
                return true;
            }
        }
    }
    return false;
}

////////////////////////////////////////////////// Locations /////////////////////////////////////////////////
// get the specific column index of the row requested from the matrix which are indicating unit vector
private int Index_Row_from_Matrix(float[][] A, int r) {
    int m = A.length;
    float[] v = Row_from_Matrix(A,r);
    v[r] = (Is_Zero_Vector(v)) ? 1 : v[r];
    int c1 = Index_for_Unit_Vector(v);
    for (int i = 0; i < m; i++) {
        int c2 = Index_for_Unit_Vector(Row_from_Matrix(A,i));
        if (c1 == c2 && c1 != -1) {
            return i;
        }
    }
    return -1;
}

// get the index starting from the specific column in the matrix which are him value not equal to 0 with or in the negative direction
private int Index_UnZero_Value(float[][] A, int k, boolean flag) {
    int n = A.length;
    if (flag) {
        for (int i = k + 1; i < n + k; i++) {
            if (A[i % n][k] != 0) {
                return i % n;
            }
        }
    } else {
        for (int i = n + k - 1; i > k - 1; i--) {
            if (A[i % n][k] != 0) {
                return i % n;
            }
        }
    }
    return -1;
}

///////////////////////////////////// Methods to Solution (Ranking Methods) /////////////////////////////////////
// solve system of linear equations Ax = b by upper ranking and then lower ranking
private float[][] Upper_Ranking_Method(float[][] A, float[][] b) {
    writer.println(Which_Type_Triangular(A,true));
    int m = A.length, n = A[0].length;
    boolean single = (m == 1 && n == 1);
    for (int i = 0; i < Math.min(m,n); i++) {
        A[i][i] = (A[i][i] >= -0.0001 && A[i][i] <= 0.0001) ? 0 : A[i][i];
        Define_Free_Variable(A,b,i);
        A = this.A; b = this.b;
        if (A[i][i] == 0 && !single) {
            int r = Index_UnZero_Value(A,i,true);
            int l = Index_Row_from_Matrix(A,i);
            if (Is_Exist_Vector(A,i) && l < i) {
                r = Index_UnZero_Value(A,i,false);
            } if (r >= 0 && r < m && r != i) {
                A[r][i] = (A[r][i] >= -0.0001 && A[r][i] <= 0.0001) ? 0 : A[r][i];
                Retreat_Elementary_Action(i,r);
                Retreat_Rows_System(A,b,i,r);
                Write_Status_System(A,b);
            }
        }
        int t = b[0].length - 1;
        int s = single ? i : i + 1;
        for (int j = s; j < m; j++) {
            if (A[i][i] != 0 && A[j][i] != 0 && !single) {
                float c = A[j][i] / A[i][i];
                Sum_Elementary_Action(c,j,i);
                for (int k = 0; k < n; k++) {
                    A[j][k] -= A[i][k] * c;
                    if (k <= t) {
                        b[j][k] -= b[i][k] * c;
                    }
                }
                A[j][i] = 0;
                Write_Status_System(A,b);
            }
            if (j == n) {
                A[j][i] = (A[j][i] >= -0.0001 && A[j][i] <= 0.0001) ? 0 : A[j][i];
            } else {
                A[j][j] = (A[j][j] >= -0.0001 && A[j][j] <= 0.0001) ? 0 : A[j][j];
            }
            boolean changed = false;
            if (m > n && Is_Zero_Row(A,j) && Is_Zero_Row(b,j)) {
                writer.println("delete the zero row from the system:");
                Delete_Zero_Row(A,b,j);
                A = this.A; b = this.b;
                m = A.length; n = A[0].length;
                changed = true;
                Write_Status_System(A,b);
            } else if (Is_Unit_Vector(A,j)) {
                int d = Index_for_Unit_Vector(Row_from_Matrix(A,j));
                if (d != -1 && A[j][d] != 0 && A[j][d] != 1) {
                    float c = 1 / A[j][d];
                    Mul_Elementary_Action(c,j);
                    for (int k = 0; k <= t; k++) {
                        b[j][k] /= A[j][d];
                    }
                    A[j][d] = 1;
                    Write_Status_System(A,b);
                }
            }
            if (!changed && Is_Zero_Row(A,j) && !Is_Zero_Row(b,j)) {
                writer.println("does not exists solutions");
                return null;
            }
        }
        if (Is_Upper_Triangular(A) && !Is_Lower_Triangular(A)) {
            writer.print("and now ");
            return Lower_Ranking_Method(A,b);
        }
    }
    if (!Is_Unit_Matrix(A)) {
        writer.println("still not yet received unit matrix");
        return Lower_Ranking_Method(A,b);
    }
    return b;
}

// solve system of linear equations Ax = b by lower ranking and then upper ranking
private float[][] Lower_Ranking_Method(float[][] A, float[][] b) {
    writer.println(Which_Type_Triangular(A,false));
    int m = A.length, n = A[0].length;
    boolean single = (m == 1 && n == 1);
    for (int i = Math.min(m,n) - 1; i >= 0; i--) {
        A[i][i] = (A[i][i] >= -0.0001 && A[i][i] <= 0.0001) ? 0 : A[i][i];
        Define_Free_Variable(A,b,i);
        A = this.A; b = this.b;
        if (A[i][i] == 0 && !single) {
            int r = Index_UnZero_Value(A,i,false);
            int l = Index_Row_from_Matrix(A,i);
            if (Is_Exist_Vector(A,i) && l < i) {
                r = Index_UnZero_Value(A,i,true);
            } if (r >= 0 && r < m && r != i) {
                A[r][i] = (A[r][i] >= -0.0001 && A[r][i] <= 0.0001) ? 0 : A[r][i];
                Retreat_Elementary_Action(i,r);
                Retreat_Rows_System(A,b,i,r);
                Write_Status_System(A,b);
            }
        }
        int t = b[0].length - 1;
        int s = single ? i : i - 1;
        for (int j = s; j >= 0; j--) {
            if (A[i][i] != 0 && A[j][i] != 0 && !single) {
                float c = A[j][i] / A[i][i];
                Sum_Elementary_Action(c,j,i);
                for (int k = n - 1; k >= 0; k--) {
                    A[j][k] -= A[i][k] * c;
                    if (k <= t) {
                        b[j][k] -= b[i][k] * c;
                    }
                }
                A[j][i] = 0;
                Write_Status_System(A,b);
            }
            if (j == n) {
                A[j][i] = (A[j][i] >= -0.0001 && A[j][i] <= 0.0001) ? 0 : A[j][i];
            } else {
                A[j][j] = (A[j][j] >= -0.0001 && A[j][j] <= 0.0001) ? 0 : A[j][j];
            }
            boolean changed = false;
            if (m > n && Is_Zero_Row(A,j) && Is_Zero_Row(b,j)) {
                writer.println("delete the zero row from the system:");
                Delete_Zero_Row(A,b,j);
                A = this.A; b = this.b;
                m = A.length; n = A[0].length;
                changed = true;
                Write_Status_System(A,b);
            } else if (Is_Unit_Vector(A,j)) {
                int d = Index_for_Unit_Vector(Row_from_Matrix(A,j));
                if (d != -1 && A[j][d] != 0 && A[j][d] != 1) {
                    float c = 1 / A[j][d];
                    Mul_Elementary_Action(c,j);
                    for (int k = 0; k <= t; k++) {
                        b[j][k] /= A[j][d];
                    }
                    A[j][d] = 1;
                    Write_Status_System(A,b);
                }
            }
            if (!changed && Is_Zero_Row(A,j) && !Is_Zero_Row(b,j)) {
                writer.println("does not exists solutions");
                return null;
            }
        }
        if (!Is_Upper_Triangular(A) && Is_Lower_Triangular(A)) {
            writer.print("and now ");
            return Upper_Ranking_Method(A,b);
        }
    }
    if (!Is_Unit_Matrix(A)) {
        writer.println("still not yet received unit matrix");
        return Upper_Ranking_Method(A,b);
    }
    return b;
}

------------------------------------------------------------ ShareTools ------------------------------------------------------------
// check if the matrix is upper triangular
public static boolean Is_Upper_Triangular(float[][] M) {
    int m = M.length;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < i; j++) {
            if (M[i][j] != 0) {
                return false;
            }
        }
    }
    return true;
}
