///////////////////////////////////////////// Change Dimensions //////////////////////////////////////////////
// add more zero rows in the system by needed
private void Increase_Rows_in_System(float[][] A, float[][] b) {
    int m = A.length, n = A[0].length;
    float[][] nA = new float[n][n];
    float[][] nb = new float[n][1];
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            nA[i][j] = A[i][j];
        }
        nb[i][0] = b[i][0];
    }
    this.A = nA; this.b = nb;
}

////////////////////////////////////////////// Free Variables ///////////////////////////////////////////////
// fill rows to full square system
private void Fill_Square_System(float[][] A, float[][] b) {
    int m = A.length, n = A[0].length;
    if (m < n) { // Underdetermined Systems
        if (n - m == 1) {
            fr.println("added one more row of zeros in order to get a square completion");
        } else {
            fr.println("added " + (n - m) + " more rows of zeros in order to get a square completion");
        }
        Increase_Rows_in_System(A,b);
    }
    // Overdetermined Systems
}

////////////////////////////////////////////////// Questions /////////////////////////////////////////////////
// check if exists two vectors in the matrix which are linearly independent
private boolean Is_Linear_Independent(float[][] A, float[][] b) {
    int m = A.length, n = A[0].length;
    for (int r = 0; r < m; r++) {
        if (Is_Zero_Row(A,r) && b[r][0] != 0) {
            return true;
        }
    }
    for (int r1 = 0; r1 < m - 1; r1++) {
        for (int r2 = r1 + 1; r2 < m; r2++) {
            Vector<Float> R  = new Vector<Float>();
            for (int j = 0; j < n; j++) {
                if (A[r1][j] != 0 || A[r2][j] != 0) {
                    R.add(A[r1][j] / A[r2][j]);
                }
            }
            if (Is_Equals_Values(R) && R.size() > 0 && (b[r1][0] != 0 || b[r2][0] != 0) && (b[r1][0] / b[r2][0] != R.get(0))) {
                return true;
            }
        }
    }
    return false;
}
